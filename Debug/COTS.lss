
COTS.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000002e4  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  00000358  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000000c  00800060  00800060  00000358  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000358  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000388  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000180  00000000  00000000  000003c4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000010d2  00000000  00000000  00000544  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000990  00000000  00000000  00001616  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000d56  00000000  00000000  00001fa6  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000003c4  00000000  00000000  00002cfc  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000007af  00000000  00000000  000030c0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000f45  00000000  00000000  0000386f  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000138  00000000  00000000  000047b4  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 e4 00 	jmp	0x1c8	; 0x1c8 <__vector_1>
   8:	0c 94 0d 01 	jmp	0x21a	; 0x21a <__vector_2>
   c:	0c 94 36 01 	jmp	0x26c	; 0x26c <__vector_3>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 9a 00 	jmp	0x134	; 0x134 <__vector_16>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e4 ee       	ldi	r30, 0xE4	; 228
  68:	f2 e0       	ldi	r31, 0x02	; 2
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a0 36       	cpi	r26, 0x60	; 96
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	20 e0       	ldi	r18, 0x00	; 0
  78:	a0 e6       	ldi	r26, 0x60	; 96
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	ac 36       	cpi	r26, 0x6C	; 108
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 4f 00 	call	0x9e	; 0x9e <main>
  8a:	0c 94 70 01 	jmp	0x2e0	; 0x2e0 <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <ADC_ISR>:
		 ADC_enuStartConversionAsynch(0, &APP_u8ADCReading, &ADC_ISR);
    }
}
void ADC_ISR(void)
{
	DIO_enuSetPortValue(DIO_u8PORTC,APP_u8ADCReading);
  92:	60 91 6b 00 	lds	r22, 0x006B	; 0x80006b <APP_u8ADCReading>
  96:	82 e0       	ldi	r24, 0x02	; 2
  98:	0e 94 ce 00 	call	0x19c	; 0x19c <DIO_enuSetPortValue>
  9c:	08 95       	ret

0000009e <main>:
//void INT1_ISR(void);
void ADC_ISR(void);
u8 APP_u8ADCReading;
int main(void)
{
	PORT_enuInit();
  9e:	0e 94 63 01 	call	0x2c6	; 0x2c6 <PORT_enuInit>
	ADC_enuInit();
  a2:	0e 94 5d 00 	call	0xba	; 0xba <ADC_enuInit>
	GIE_voidEnable();
  a6:	0e 94 5f 01 	call	0x2be	; 0x2be <GIE_voidEnable>
	//LCD_enuInit();
    while (1) 
    {
		 ADC_enuStartConversionAsynch(0, &APP_u8ADCReading, &ADC_ISR);
  aa:	49 e4       	ldi	r20, 0x49	; 73
  ac:	50 e0       	ldi	r21, 0x00	; 0
  ae:	6b e6       	ldi	r22, 0x6B	; 107
  b0:	70 e0       	ldi	r23, 0x00	; 0
  b2:	80 e0       	ldi	r24, 0x00	; 0
  b4:	0e 94 71 00 	call	0xe2	; 0xe2 <ADC_enuStartConversionAsynch>
  b8:	f8 cf       	rjmp	.-16     	; 0xaa <main+0xc>

000000ba <ADC_enuInit>:
{
	s32 Local_s32Slope =  (Copy_s32OutputMax - Copy_s32OutputMin)/(Copy_s32InputMax - Copy_s32InputMin);
	s32 Local_s32OutputVal = (Local_s32Slope * (Copy_s32InputVal - Copy_s32InputMin)) + Copy_s32OutputMin;
	
	return Local_s32OutputVal;
}
  ba:	87 b1       	in	r24, 0x07	; 7
  bc:	80 64       	ori	r24, 0x40	; 64
  be:	87 b9       	out	0x07, r24	; 7
  c0:	87 b1       	in	r24, 0x07	; 7
  c2:	8f 77       	andi	r24, 0x7F	; 127
  c4:	87 b9       	out	0x07, r24	; 7
  c6:	87 b1       	in	r24, 0x07	; 7
  c8:	80 62       	ori	r24, 0x20	; 32
  ca:	87 b9       	out	0x07, r24	; 7
  cc:	86 b1       	in	r24, 0x06	; 6
  ce:	88 7f       	andi	r24, 0xF8	; 248
  d0:	86 b9       	out	0x06, r24	; 6
  d2:	86 b1       	in	r24, 0x06	; 6
  d4:	87 60       	ori	r24, 0x07	; 7
  d6:	86 b9       	out	0x06, r24	; 6
  d8:	86 b1       	in	r24, 0x06	; 6
  da:	80 68       	ori	r24, 0x80	; 128
  dc:	86 b9       	out	0x06, r24	; 6
  de:	80 e0       	ldi	r24, 0x00	; 0
  e0:	08 95       	ret

000000e2 <ADC_enuStartConversionAsynch>:
  e2:	90 91 60 00 	lds	r25, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
  e6:	91 11       	cpse	r25, r1
  e8:	1f c0       	rjmp	.+62     	; 0x128 <ADC_enuStartConversionAsynch+0x46>
  ea:	61 15       	cp	r22, r1
  ec:	71 05       	cpc	r23, r1
  ee:	f1 f0       	breq	.+60     	; 0x12c <ADC_enuStartConversionAsynch+0x4a>
  f0:	41 15       	cp	r20, r1
  f2:	51 05       	cpc	r21, r1
  f4:	e9 f0       	breq	.+58     	; 0x130 <ADC_enuStartConversionAsynch+0x4e>
  f6:	91 e0       	ldi	r25, 0x01	; 1
  f8:	90 93 60 00 	sts	0x0060, r25	; 0x800060 <__DATA_REGION_ORIGIN__>
  fc:	70 93 64 00 	sts	0x0064, r23	; 0x800064 <ADC_pu16Reading+0x1>
 100:	60 93 63 00 	sts	0x0063, r22	; 0x800063 <ADC_pu16Reading>
 104:	50 93 62 00 	sts	0x0062, r21	; 0x800062 <ADC_pvCallBackNotificationFunc+0x1>
 108:	40 93 61 00 	sts	0x0061, r20	; 0x800061 <ADC_pvCallBackNotificationFunc>
 10c:	97 b1       	in	r25, 0x07	; 7
 10e:	90 7e       	andi	r25, 0xE0	; 224
 110:	97 b9       	out	0x07, r25	; 7
 112:	97 b1       	in	r25, 0x07	; 7
 114:	89 2b       	or	r24, r25
 116:	87 b9       	out	0x07, r24	; 7
 118:	86 b1       	in	r24, 0x06	; 6
 11a:	80 64       	ori	r24, 0x40	; 64
 11c:	86 b9       	out	0x06, r24	; 6
 11e:	86 b1       	in	r24, 0x06	; 6
 120:	88 60       	ori	r24, 0x08	; 8
 122:	86 b9       	out	0x06, r24	; 6
 124:	80 e0       	ldi	r24, 0x00	; 0
 126:	08 95       	ret
 128:	84 e0       	ldi	r24, 0x04	; 4
 12a:	08 95       	ret
 12c:	82 e0       	ldi	r24, 0x02	; 2
 12e:	08 95       	ret
 130:	82 e0       	ldi	r24, 0x02	; 2
 132:	08 95       	ret

00000134 <__vector_16>:

void __vector_16 (void) __attribute__((signal));
void __vector_16 (void)
{
 134:	1f 92       	push	r1
 136:	0f 92       	push	r0
 138:	0f b6       	in	r0, 0x3f	; 63
 13a:	0f 92       	push	r0
 13c:	11 24       	eor	r1, r1
 13e:	2f 93       	push	r18
 140:	3f 93       	push	r19
 142:	4f 93       	push	r20
 144:	5f 93       	push	r21
 146:	6f 93       	push	r22
 148:	7f 93       	push	r23
 14a:	8f 93       	push	r24
 14c:	9f 93       	push	r25
 14e:	af 93       	push	r26
 150:	bf 93       	push	r27
 152:	ef 93       	push	r30
 154:	ff 93       	push	r31
	//Get ADC reading
	*ADC_pu16Reading = ADCH;
 156:	e0 91 63 00 	lds	r30, 0x0063	; 0x800063 <ADC_pu16Reading>
 15a:	f0 91 64 00 	lds	r31, 0x0064	; 0x800064 <ADC_pu16Reading+0x1>
 15e:	85 b1       	in	r24, 0x05	; 5
 160:	90 e0       	ldi	r25, 0x00	; 0
 162:	91 83       	std	Z+1, r25	; 0x01
 164:	80 83       	st	Z, r24
	
	//make ADC state IDLE
	ADC_u8BusyState = IDLE;
 166:	10 92 60 00 	sts	0x0060, r1	; 0x800060 <__DATA_REGION_ORIGIN__>
	
	//invoke the callback notification function
	ADC_pvCallBackNotificationFunc();
 16a:	e0 91 61 00 	lds	r30, 0x0061	; 0x800061 <ADC_pvCallBackNotificationFunc>
 16e:	f0 91 62 00 	lds	r31, 0x0062	; 0x800062 <ADC_pvCallBackNotificationFunc+0x1>
 172:	09 95       	icall
	 
	//disable ADC conversion complete interrupt
	CLR_BIT(ADCSRA,ADCSRA_ADIE);
 174:	86 b1       	in	r24, 0x06	; 6
 176:	87 7f       	andi	r24, 0xF7	; 247
 178:	86 b9       	out	0x06, r24	; 6
 17a:	ff 91       	pop	r31
 17c:	ef 91       	pop	r30
 17e:	bf 91       	pop	r27
 180:	af 91       	pop	r26
 182:	9f 91       	pop	r25
 184:	8f 91       	pop	r24
 186:	7f 91       	pop	r23
 188:	6f 91       	pop	r22
 18a:	5f 91       	pop	r21
 18c:	4f 91       	pop	r20
 18e:	3f 91       	pop	r19
 190:	2f 91       	pop	r18
 192:	0f 90       	pop	r0
 194:	0f be       	out	0x3f, r0	; 63
 196:	0f 90       	pop	r0
 198:	1f 90       	pop	r1
 19a:	18 95       	reti

0000019c <DIO_enuSetPortValue>:
///////////////////////////
ES_t DIO_enuSetPortValue(u8 Copy_u8Port, u8 Copy_u8Value)
{
	ES_t Local_enuErrorState = ES_OK;

	switch(Copy_u8Port)
 19c:	81 30       	cpi	r24, 0x01	; 1
 19e:	49 f0       	breq	.+18     	; 0x1b2 <DIO_enuSetPortValue+0x16>
 1a0:	28 f0       	brcs	.+10     	; 0x1ac <DIO_enuSetPortValue+0x10>
 1a2:	82 30       	cpi	r24, 0x02	; 2
 1a4:	49 f0       	breq	.+18     	; 0x1b8 <DIO_enuSetPortValue+0x1c>
 1a6:	83 30       	cpi	r24, 0x03	; 3
 1a8:	51 f0       	breq	.+20     	; 0x1be <DIO_enuSetPortValue+0x22>
 1aa:	0c c0       	rjmp	.+24     	; 0x1c4 <DIO_enuSetPortValue+0x28>
	{
		case DIO_u8PORTA: PORTA=Copy_u8Value; break;
 1ac:	6b bb       	out	0x1b, r22	; 27
	return Local_enuErrorState;
}*/
///////////////////////////
ES_t DIO_enuSetPortValue(u8 Copy_u8Port, u8 Copy_u8Value)
{
	ES_t Local_enuErrorState = ES_OK;
 1ae:	80 e0       	ldi	r24, 0x00	; 0

	switch(Copy_u8Port)
	{
		case DIO_u8PORTA: PORTA=Copy_u8Value; break;
 1b0:	08 95       	ret
		case DIO_u8PORTB: PORTB=Copy_u8Value; break;
 1b2:	68 bb       	out	0x18, r22	; 24
	return Local_enuErrorState;
}*/
///////////////////////////
ES_t DIO_enuSetPortValue(u8 Copy_u8Port, u8 Copy_u8Value)
{
	ES_t Local_enuErrorState = ES_OK;
 1b4:	80 e0       	ldi	r24, 0x00	; 0

	switch(Copy_u8Port)
	{
		case DIO_u8PORTA: PORTA=Copy_u8Value; break;
		case DIO_u8PORTB: PORTB=Copy_u8Value; break;
 1b6:	08 95       	ret
		case DIO_u8PORTC: PORTC=Copy_u8Value; break;
 1b8:	65 bb       	out	0x15, r22	; 21
	return Local_enuErrorState;
}*/
///////////////////////////
ES_t DIO_enuSetPortValue(u8 Copy_u8Port, u8 Copy_u8Value)
{
	ES_t Local_enuErrorState = ES_OK;
 1ba:	80 e0       	ldi	r24, 0x00	; 0

	switch(Copy_u8Port)
	{
		case DIO_u8PORTA: PORTA=Copy_u8Value; break;
		case DIO_u8PORTB: PORTB=Copy_u8Value; break;
		case DIO_u8PORTC: PORTC=Copy_u8Value; break;
 1bc:	08 95       	ret
		case DIO_u8PORTD: PORTD=Copy_u8Value; break;
 1be:	62 bb       	out	0x12, r22	; 18
	return Local_enuErrorState;
}*/
///////////////////////////
ES_t DIO_enuSetPortValue(u8 Copy_u8Port, u8 Copy_u8Value)
{
	ES_t Local_enuErrorState = ES_OK;
 1c0:	80 e0       	ldi	r24, 0x00	; 0
	switch(Copy_u8Port)
	{
		case DIO_u8PORTA: PORTA=Copy_u8Value; break;
		case DIO_u8PORTB: PORTB=Copy_u8Value; break;
		case DIO_u8PORTC: PORTC=Copy_u8Value; break;
		case DIO_u8PORTD: PORTD=Copy_u8Value; break;
 1c2:	08 95       	ret
		default: Local_enuErrorState = ES_OUT_OF_RANGE; break;
 1c4:	83 e0       	ldi	r24, 0x03	; 3
	}
	
	return Local_enuErrorState;
}
 1c6:	08 95       	ret

000001c8 <__vector_1>:
	{
		Local_enuErrorState = ES_NULL_POINTER;
	}
	
	return Local_enuErrorState;
}
 1c8:	1f 92       	push	r1
 1ca:	0f 92       	push	r0
 1cc:	0f b6       	in	r0, 0x3f	; 63
 1ce:	0f 92       	push	r0
 1d0:	11 24       	eor	r1, r1
 1d2:	2f 93       	push	r18
 1d4:	3f 93       	push	r19
 1d6:	4f 93       	push	r20
 1d8:	5f 93       	push	r21
 1da:	6f 93       	push	r22
 1dc:	7f 93       	push	r23
 1de:	8f 93       	push	r24
 1e0:	9f 93       	push	r25
 1e2:	af 93       	push	r26
 1e4:	bf 93       	push	r27
 1e6:	ef 93       	push	r30
 1e8:	ff 93       	push	r31
 1ea:	e0 91 69 00 	lds	r30, 0x0069	; 0x800069 <EXTI_pvInt0Isr>
 1ee:	f0 91 6a 00 	lds	r31, 0x006A	; 0x80006a <EXTI_pvInt0Isr+0x1>
 1f2:	30 97       	sbiw	r30, 0x00	; 0
 1f4:	09 f0       	breq	.+2      	; 0x1f8 <__vector_1+0x30>
 1f6:	09 95       	icall
 1f8:	ff 91       	pop	r31
 1fa:	ef 91       	pop	r30
 1fc:	bf 91       	pop	r27
 1fe:	af 91       	pop	r26
 200:	9f 91       	pop	r25
 202:	8f 91       	pop	r24
 204:	7f 91       	pop	r23
 206:	6f 91       	pop	r22
 208:	5f 91       	pop	r21
 20a:	4f 91       	pop	r20
 20c:	3f 91       	pop	r19
 20e:	2f 91       	pop	r18
 210:	0f 90       	pop	r0
 212:	0f be       	out	0x3f, r0	; 63
 214:	0f 90       	pop	r0
 216:	1f 90       	pop	r1
 218:	18 95       	reti

0000021a <__vector_2>:
 21a:	1f 92       	push	r1
 21c:	0f 92       	push	r0
 21e:	0f b6       	in	r0, 0x3f	; 63
 220:	0f 92       	push	r0
 222:	11 24       	eor	r1, r1
 224:	2f 93       	push	r18
 226:	3f 93       	push	r19
 228:	4f 93       	push	r20
 22a:	5f 93       	push	r21
 22c:	6f 93       	push	r22
 22e:	7f 93       	push	r23
 230:	8f 93       	push	r24
 232:	9f 93       	push	r25
 234:	af 93       	push	r26
 236:	bf 93       	push	r27
 238:	ef 93       	push	r30
 23a:	ff 93       	push	r31
 23c:	e0 91 67 00 	lds	r30, 0x0067	; 0x800067 <EXTI_pvInt1Isr>
 240:	f0 91 68 00 	lds	r31, 0x0068	; 0x800068 <EXTI_pvInt1Isr+0x1>
 244:	30 97       	sbiw	r30, 0x00	; 0
 246:	09 f0       	breq	.+2      	; 0x24a <__vector_2+0x30>
 248:	09 95       	icall
 24a:	ff 91       	pop	r31
 24c:	ef 91       	pop	r30
 24e:	bf 91       	pop	r27
 250:	af 91       	pop	r26
 252:	9f 91       	pop	r25
 254:	8f 91       	pop	r24
 256:	7f 91       	pop	r23
 258:	6f 91       	pop	r22
 25a:	5f 91       	pop	r21
 25c:	4f 91       	pop	r20
 25e:	3f 91       	pop	r19
 260:	2f 91       	pop	r18
 262:	0f 90       	pop	r0
 264:	0f be       	out	0x3f, r0	; 63
 266:	0f 90       	pop	r0
 268:	1f 90       	pop	r1
 26a:	18 95       	reti

0000026c <__vector_3>:

void __vector_3 (void) __attribute__((signal));
void __vector_3 (void)
{
 26c:	1f 92       	push	r1
 26e:	0f 92       	push	r0
 270:	0f b6       	in	r0, 0x3f	; 63
 272:	0f 92       	push	r0
 274:	11 24       	eor	r1, r1
 276:	2f 93       	push	r18
 278:	3f 93       	push	r19
 27a:	4f 93       	push	r20
 27c:	5f 93       	push	r21
 27e:	6f 93       	push	r22
 280:	7f 93       	push	r23
 282:	8f 93       	push	r24
 284:	9f 93       	push	r25
 286:	af 93       	push	r26
 288:	bf 93       	push	r27
 28a:	ef 93       	push	r30
 28c:	ff 93       	push	r31
	if(EXTI_pvInt2Isr != NULL)
 28e:	e0 91 65 00 	lds	r30, 0x0065	; 0x800065 <EXTI_pvInt2Isr>
 292:	f0 91 66 00 	lds	r31, 0x0066	; 0x800066 <EXTI_pvInt2Isr+0x1>
 296:	30 97       	sbiw	r30, 0x00	; 0
 298:	09 f0       	breq	.+2      	; 0x29c <__vector_3+0x30>
	{
		EXTI_pvInt2Isr();
 29a:	09 95       	icall
	}
	else
	{
		//Do nothing
	}
 29c:	ff 91       	pop	r31
 29e:	ef 91       	pop	r30
 2a0:	bf 91       	pop	r27
 2a2:	af 91       	pop	r26
 2a4:	9f 91       	pop	r25
 2a6:	8f 91       	pop	r24
 2a8:	7f 91       	pop	r23
 2aa:	6f 91       	pop	r22
 2ac:	5f 91       	pop	r21
 2ae:	4f 91       	pop	r20
 2b0:	3f 91       	pop	r19
 2b2:	2f 91       	pop	r18
 2b4:	0f 90       	pop	r0
 2b6:	0f be       	out	0x3f, r0	; 63
 2b8:	0f 90       	pop	r0
 2ba:	1f 90       	pop	r1
 2bc:	18 95       	reti

000002be <GIE_voidEnable>:
#include "GIE_interface.h"
#include "GIE_private.h"

void GIE_voidEnable(void)
{
	SET_BIT(SREG,SREG_I);
 2be:	8f b7       	in	r24, 0x3f	; 63
 2c0:	80 68       	ori	r24, 0x80	; 128
 2c2:	8f bf       	out	0x3f, r24	; 63
 2c4:	08 95       	ret

000002c6 <PORT_enuInit>:

ES_t PORT_enuInit(void)
{
	ES_t Local_enuErrorState = ES_NOK;
	
	DDRA = PORTA_DIR;
 2c6:	1a ba       	out	0x1a, r1	; 26
	DDRB = PORTB_DIR;
 2c8:	8f ef       	ldi	r24, 0xFF	; 255
 2ca:	87 bb       	out	0x17, r24	; 23
	DDRC = PORTC_DIR;
 2cc:	84 bb       	out	0x14, r24	; 20
	DDRD = PORTD_DIR;
 2ce:	81 bb       	out	0x11, r24	; 17
	
	PORTA = PORTA_VAL;
 2d0:	1b ba       	out	0x1b, r1	; 27
	PORTB = PORTB_VAL;
 2d2:	84 e0       	ldi	r24, 0x04	; 4
 2d4:	88 bb       	out	0x18, r24	; 24
	PORTC = PORTC_VAL;
 2d6:	15 ba       	out	0x15, r1	; 21
	PORTD = PORTD_VAL;
 2d8:	8d e0       	ldi	r24, 0x0D	; 13
 2da:	82 bb       	out	0x12, r24	; 18
	
	Local_enuErrorState = ES_OK;
	
	return Local_enuErrorState;
 2dc:	80 e0       	ldi	r24, 0x00	; 0
 2de:	08 95       	ret

000002e0 <_exit>:
 2e0:	f8 94       	cli

000002e2 <__stop_program>:
 2e2:	ff cf       	rjmp	.-2      	; 0x2e2 <__stop_program>
